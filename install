#!/usr/bin/env bash

#/ Install configuration files and packages
#/
#/ Commands:
#/   dev            Install dev packages and config
#/   dev-packages   Install dev packages
#/   gui            Install gui packages and configs
#/   gui-packages   Install gui packages
#/   dev-config     Install dev config 
#/   gui-config     Install gui configs
#/   <empty>        Install all packages and configs
#/
#/ Flags:
#/   -h | -h Show help message
#/

set -e

ALACRITTY_PATH=~/.config/alacritty/
INIT_VIM=$HOME/.config/nvim/init.vim
COC_SETTINGS=$HOME/.config/nvim/coc-settings.json
COC_SNIPPETS=$HOME/.config/coc/ultisnips
ASDF_PATH=~/.asdf
ASDF_BIN=$ASDF_PATH/bin/asdf
I3BLOCKS_PATH=~/.config/i3blocks
ROFI_PATH=~/.config/rofi
TPM_PATH=~/.tmux/plugins/tpm
PACMAN_INSTALL="pacman -S --noconfirm"
PYTHON_VERSION=3.7.6
DOTFILES=~/.dotfiles/config

show_help() {
     grep '^#/' < "$0" | cut -c4-
}

install_git() {
    ln -s $DOTFILES/git/gitconfig $HOME/.gitconfig
    ln -s $DOTFILES/git/gitmessage $HOME/.gitmessage
}

install_bash() {
    ln -s $DOTFILES/bash/bash_profile $HOME/.bash_profile
    echo -e "\n . <(cat $DOTFILES/bash/bashrc)" >> $HOME/.bashrc
    echo -e '\n export PATH=$PATH:$HOME/.dotfiles/bin' >> $HOME/.bashrc
}

install_X() {
    ln -s $DOTFILES/X/xinitrc $HOME/.xinitrc
}

install_i3() {
    # Setup i3 config
    if [ ! -d $HOME/.config/i3 ]; then
        mkdir ~/.config/i3
    fi
    ln -s $DOTFILES/i3/config $HOME/.config/i3/config

    # Setup i3blocks config
    if [ ! -d $I3BLOCKS_PATH ]; then
        git clone https://github.com/vivien/i3blocks-contrib $I3BLOCKS_PATH
    fi
    ln -s $DOTFILES/i3blocks/config $HOME/.config/i3blocks/config

    # Setup rofi config
    if [ ! -d $ROFI_PATH ]; then
        mkdir -p $ROFI_PATH
    fi
    ln -s $DOTFILES/rofi/config $ROFI_PATH/config
}

install_asdf() {
    if [ ! -d $ASDF_PATH  ]; then
        git clone https://github.com/asdf-vm/asdf.git $ASDF_PATH --branch v0.7.6
    fi

    echo -e '\n. $HOME/.asdf/asdf.sh' >> $DOTFILES/bash/.local
    echo -e '\n. $HOME/.asdf/completions/asdf.bash' >> $DOTFILES/bash/.local

    $ASDF_BIN plugin-add python

    # $ASDF_BIN install python $PYTHON_VERSION
    # $ASDF_BIN global python $PYTHON_VERSION
}

install_tmux() {
    if [ ! -d $TPM_PATH ]; then
        git clone https://github.com/tmux-plugins/tpm $TPM_PATH
    fi
    ln -s $DOTFILES/tmux/tmux.conf $HOME/.tmux.conf
}

install_terminal() {
    if [ ! -d $ALACRITTY_PATH ]; then
        mkdir -p $ALACRITTY_PATH
    fi
    ln -s $DOTFILES/alacritty/alacritty.yml $ALACRITTY_PATH/alacritty.yml
}

install_neovim() {
    if [ ! -e "$INIT_VIM" ]; then
        mkdir -p $HOME/.config/nvim/
    fi

    if [ ! -f "~/.local/share/nvim/site/autoload/plug.vim"  ]; then
        curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi
    ln -s $DOTFILES/nvim/init.vim $INIT_VIM

    # setup coc settings
    if [ ! -e "$COC_SETTINGS" ]; then
        ln -s $DOTFILES/nvim/coc-settings.json $COC_SETTINGS
    fi

    # setup coc snippets
    if [ ! -d "$COC_SNIPPETS" ]; then
        mkdir -p $COC_SNIPPETS
    fi
    if [ ! -e "$COC_SNIPPETS"/go.snippets ]; then
        ln -s $DOTFILES/nvim/ultisnips/go.snippets $COC_SNIPPETS/go.snippets
    fi

    # Install python lsp
    pip install --user python-language-server
    python -m venv ~/.config/nvim/venv
    ~/.config/nvim/venv/bin/pip install pynvim

    # Install bash lsp
    npm i -g bash-language-server

    # Install docker lsp
    npm install -g dockerfile-language-server-nodejs

    # nvim +PlugInstall +qall # TODO check why generate error reading from input
}

DEV_PACKAGES=(
    'python'
    'python-pip'
    'nodejs'
    'npm'
    'go'
    'git'
    'neovim'
    'tmux'
    'fzf'
    'the_silver_searcher'
    'xclip'
    'docker'
    'docker-compose'
)

GUI_PACKAGES=(
    'firefox'
    'firefox-developer-edition'
    'telegram-desktop'
    'i3-gaps'
    'i3lock'
    'i3blocks'
    'rofi'
    'vifm'
    'tk'
    'libffi'
    'alacritty'
    'unclutter'
)

AUR_PACKAGES=(
    'brave'
    'nerd-fonts-complete'
    'paper-icon-theme'
    'postman-bin'
    'spotify'
)


install_packages() {
    local MANAGER="$1"
    shift
    local PACKAGES=("$@")

    for i in "${PACKAGES[@]}";
    do
        if pacman -Qq "$i" > /dev/null ; then
            continue
        fi

        if [ "$MANAGER" == yay ]; then
            if ! sudo -u "$SUDO_USER" yay -S "$i" -q --noconfirm; then
                echo "Error to install package $i"
                exit 1
            fi
            continue
        fi

        if ! pacman -S "$i" --quiet --noconfirm; then
            echo "Error to install package $i"
            exit 1
        fi
    done
}

install_dev_packages() {
    echo "Installing dev packages"
    install_packages "pacman" "${DEV_PACKAGES[@]}"
}

install_gui_packages() {
    echo "Installing gui packages"
    install_packages "pacman" "${GUI_PACKAGES[@]}"
}

install_aur_packages(){
    echo "Installing aur packages"
    install_packages "yay" "${AUR_PACKAGES[@]}"
}

install_dev_config() {
    install_git
    install_asdf
    install_neovim
    install_tmux
    install_bash
}

install_gui_config() {
    echo "Installing gui configs"
    install_X
    install_i3
    install_terminal
}

install_all() {
    echo "Installing packages"
    install_dev_packages
    install_gui_packages

    echo "Installing config"
    install_dev_config
    install_gui_config
}

install_dev() {
    install_dev_packages
    install_dev_config
}

install_gui() {
    install_gui_packages
    install_gui_config
}

case "$1" in
    "dev"          ) install_dev; exit 0 ;;
    "dev-packages" ) install_dev_packages; exit 0 ;;
    "gui"          ) install_gui; exit 0 ;;
    "gui-packages" ) install_gui_packages; exit 0 ;;
    "dev-config"   ) install_dev_config; exit 0 ;;
    "gui-config"   ) install_gui_config; exit 0 ;;
    "-h"           ) show_help; exit 0 ;;
    ""             ) install_all; exit 0 ;;
esac

